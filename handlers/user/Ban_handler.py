from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import Message

from filters import Teacher
from keyboards.default import Teachers_buttons
from keyboards.default.Menu_buttons import back, yes_or_no
from loader import dp, db


@dp.message_handler(Command('ban'), Teacher())
async def banned(message: Message, state: FSMContext):
    await message.answer('<b>–í—ã –≤–æ—à–ª–∏ –≤ —Ñ—É–Ω—Ü–∏—é –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç(@–∏–º—è_–∞–∫–∫–∞—É–Ω—Ç–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:',
                         reply_markup=back)
    await state.set_state('username_for_ban')


@dp.message_handler(state='username_for_ban')
async def write_username(message: Message, state: FSMContext):
    message.text = message.text.replace('@', '')
    if message.text.upper() == '–ù–ê–ó–ê–î' or message.text.upper() == 'üîô–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer(text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                  '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                  '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if len(message.text) < 34:
            id = await db.exists_with_username(message.text)
            if id is None:
                await message.answer('–¢–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç—É –∏–ª–∏ –æ–Ω —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ!', reply_markup=back)
                await state.finish()
            else:
                await state.update_data(username=message.text)
                await state.update_data(id=id)
                await state.set_state('accept_for_ban')
                await message.answer('–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?', reply_markup=yes_or_no)
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ!', reply_markup=back)


@dp.message_handler(state='accept_for_ban')
async def accept(message: Message, state: FSMContext):
    data = await state.get_data()
    id = data.get('id')
    username = data.get('username')
    if message.text.upper() == '–î–ê':
        await db.add_ban(id=id, username=username)
        await db.del_ban(id=id)
        await state.finish()
        await message.answer('<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>\n'
                             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ "/unban"', reply_markup=Teachers_buttons)
    else:
        await message.answer('<b>–í—ã —Ä–µ—à–∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
        await state.finish()
        await message.answer(text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                  '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                  '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)


# UNBAN

@dp.message_handler(Command('unban'), Teacher())
async def banned(message: Message, state: FSMContext):
    await message.answer('<b>–≤—ã –≤–æ—à–ª–∏ –≤ —Ñ—É–Ω—Ü–∏—é –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>')
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç(@–∏–º—è_–∞–∫–∫–∞—É–Ω—Ç–∞) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å!',
                         reply_markup=back)
    await state.set_state('username_for_unban')


@dp.message_handler(state='username_for_unban')
async def write_username(message: Message, state: FSMContext):
    message.text = str(message.text).replace('@', '')
    if message.text.upper() == '–ù–ê–ó–ê–î' or message.text.upper() == 'üîô–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer(text='<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                  '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                  '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if len(message.text) < 34:
            id = await db.exists_with_username_in_ban(message.text)
            if id is None:
                await message.answer('–¢–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –Ω–µ—Ç—É –≤ –±–∞–Ω-–ª–∏—Å—Ç–µ, –æ–Ω –ª–∏–±–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ª–∏–±–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
                                     reply_markup=back)
                await state.finish()
            else:
                await db.unban(id=id)
                await state.finish()
                await message.answer('<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!</b>', reply_markup=Teachers_buttons)
        else:
            await message.answer('–¢–∞–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ', reply_markup=back)
