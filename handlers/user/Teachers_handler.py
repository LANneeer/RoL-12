import json
from random import randint

from aiogram.utils.exceptions import MessageToForwardNotFound, TelegramAPIError
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes
from aiogram.utils.exceptions import Unauthorized

from filters import Teacher
from keyboards.default import OnePlus
from keyboards.default.Menu_buttons import classroom_number, classroom_letter, back, numbers_list, letters_list, \
    back_and_send
from keyboards.default.Teacher_menu import Teachers_buttons
from loader import dp, db, bot
from state import SendWork, GetWork, Advert, TellWork, TeachersUpdates
from utils.misc import rate_limit


# FUNC –û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–î–ê–ù–ò–Ø

@dp.message_handler(
    lambda message: message.text and message.text.upper() in ['–û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–î–ê–ù–ò–Ø', '–û–¢–ü–†–ê–í–ò–¢–¨ –ó–ê–î–ê–ù–ò–Ø üì§'],
    Teacher())
async def send_HW_TWO(message: Message, state: FSMContext):
    teacher_data = await db.get_teacher_data(message.from_user.id)
    subject = teacher_data[0]
    group = teacher_data[1]
    pargroup = teacher_data[2]
    school = teacher_data[3]
    await state.update_data(subject=subject, group=group, pargroup=pargroup, school=school)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–¥–∞—Ç—å —Ä–∞–±–æ—Ç—ã:',
                         reply_markup=OnePlus(
                             text=subject.split(', '),
                         ).reply_keyboard)
    await SendWork.change_subject.set()


@dp.message_handler(state=SendWork.change_subject)
async def get_subject(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == 'üîô–ù–ê–ó–ê–î' or subject == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        subjects_teacher = (await state.get_data()).get('subject')
        group_teacher = (await state.get_data()).get('group')
        if subject.title() in subjects_teacher.split(', '):
            await state.update_data(subject=subject.title())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–¥–∞—Ç—å —Ä–∞–±–æ—Ç—ã:',
                                 reply_markup=OnePlus(
                                     text=group_teacher.split('/'),
                                 ).reply_keyboard)
            await SendWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à</b> –ø—Ä–µ–¥–º–µ—Ç!')


@dp.message_handler(state=SendWork.change_group)
async def get_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        group_teacher = (await state.get_data()).get('group')
        if group in group_teacher.split('/'):
            await state.update_data(group=group.upper())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ:',
                                 reply_markup=classroom_number)
            await SendWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à–µ</b> –æ—Ç–¥–µ–ª–µ–Ω–∏–µ!')


@dp.message_handler(state=SendWork.classroomNumber)
async def get_number(message: Message, state: FSMContext):
    answer = message.text.upper()
    if answer == 'üîô–ù–ê–ó–ê–î' or answer == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if answer in numbers_list:
            await state.update_data(classroomNumber=answer)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É</b> –∫–ª–∞—Å—Å–∞', reply_markup=classroom_letter)
            await SendWork.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_number)


@dp.message_handler(state=SendWork.classroomLetter)
async def get_letter(message: Message, state: FSMContext):
    answer = message.text.upper()
    if answer == 'üîô–ù–ê–ó–ê–î' or answer == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if answer in letters_list:
            await state.update_data(classroomLetter=answer)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ —Ñ–æ—Ç–æ</b> —Å –∑–∞–¥–∞–Ω–∏–µ–º!', reply_markup=back_and_send)
            await SendWork.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_letter)


@rate_limit(limit=0)
@dp.message_handler(state=SendWork.files_id, content_types=ContentTypes.ANY)
async def get_document(message: Message, state: FSMContext):
    answer = str(message.text).upper()
    if answer == '–°–î–ê–¢–¨':
        data = await state.get_data()
        group = data.get('group')
        pargroup = data.get('pargroup')
        school = data.get('school')
        classroomNumber = data.get('classroomNumber')
        classroomLetter = data.get('classroomLetter')
        subject = data.get('subject')
        if await db.exist_teachers_work(subject=subject, group=group, pargroup=pargroup,
                                        classroom_number=int(classroomNumber),
                                        classroom_letter=classroomLetter, school=school):
            await db.delete_teachers_work(subject=subject, group=group, pargroup=pargroup,
                                          classroom_number=int(classroomNumber),
                                          classroom_letter=classroomLetter, school=school)
        temp_data = None
        with open('temp.json', 'r') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
        if len(temp_data) != 0:
            works_list = temp_data[str(message.from_user.id)]
            del temp_data[str(message.from_user.id)]
            with open('temp.json', 'w') as file:
                file.write(json.dumps(temp_data))
            for file in works_list:
                await db.add_teachers_work(id=message.from_user.id, username=message.from_user.username,
                                           school=school, groups=group,
                                           classroom_number=int(classroomNumber),
                                           classroom_letter=classroomLetter,
                                           subject=subject, file_id=file, pargroup=int(pargroup))
            await state.finish()
            await message.answer(f'–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è {classroomNumber} "{classroomLetter}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                 reply_markup=Teachers_buttons)
        else:
            await message.answer('<b>–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>\n'
                                 '–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ</b>, –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏—Ç–µ <b>"–ù–ê–ó–ê–î"</b>',
                                 reply_markup=back_and_send)
    elif answer == 'üîô–ù–ê–ó–ê–î' or answer == '–ù–ê–ó–ê–î':
        with open('temp.json', 'r') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
            try:
                del temp_data[str(message.from_user.id)]
            except KeyError:
                pass
            with open('temp.json', 'w') as f:
                f.write(json.dumps(temp_data))
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        temp_data = None
        with open('temp.json', 'r', encoding='utf-8') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
        if not isinstance(temp_data, dict):
            temp_data[message.from_user.id] = [str(message.message_id)]
        with open('temp.json', 'w') as file:
            user_id = str(message.from_user.id)
            if len(temp_data.get(user_id, [])) == 5:
                await message.answer('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ 5 —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–î–ê–¢–¨"</b>:')
            else:
                temp_data[user_id] = temp_data.get(user_id, []) + [str(message.message_id)]
            file.write(str(json.dumps(temp_data)))


# FUNC –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ã!

@dp.message_handler(lambda message: message.text and message.text.upper() in ['–ü–û–õ–£–ß–ò–¢–¨ –†–ê–ë–û–¢–´', '–ü–û–õ–£–ß–ò–¢–¨ –†–ê–ë–û–¢–´ üì•'],
                    Teacher())
async def get_works(message: Message, state: FSMContext):
    teacher_data = await db.get_teacher_data(message.from_user.id)
    subject = teacher_data[0]
    group = teacher_data[1]
    pargroup = teacher_data[2]
    school = teacher_data[3]
    await state.update_data(subject=subject, group=group, pargroup=pargroup, school=school)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b> –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ã:',
                         reply_markup=OnePlus(
                             text=subject.split(', '),
                         ).reply_keyboard)
    await GetWork.change_subject.set()


@dp.message_handler(state=GetWork.change_subject)
async def get_subject(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == 'üîô–ù–ê–ó–ê–î' or subject == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        subjects_teacher = (await state.get_data()).get('subject')
        group_teacher = (await state.get_data()).get('group')
        if subject.title() in subjects_teacher.split(', '):
            await state.update_data(subject=subject.title())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ã:',
                                 reply_markup=OnePlus(
                                     text=group_teacher.split('/'),
                                 ).reply_keyboard)
            await GetWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à</b> –ø—Ä–µ–¥–º–µ—Ç!')


@dp.message_handler(state=GetWork.change_group)
async def get_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        group_teacher = (await state.get_data()).get('group')
        if group in group_teacher.split('/'):
            await state.update_data(group=group.upper())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–ª–∞—Å—Å–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–±–æ—Ç—ã:',
                                 reply_markup=classroom_number)
            await GetWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à–µ</b> –æ—Ç–¥–µ–ª–µ–Ω–∏–µ!')


@dp.message_handler(state=GetWork.classroomNumber)
async def get_number(message: Message, state: FSMContext):
    number = message.text.upper()
    if number == 'üîô–ù–ê–ó–ê–î' or number == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if number in numbers_list:
            await state.update_data(classroomNumber=number)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É</b> –∫–ª–∞—Å—Å–∞', reply_markup=classroom_letter)
            await GetWork.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_number)


@dp.message_handler(state=GetWork.classroomLetter)
async def get_caption(message: Message, state: FSMContext):
    letter = str(message.text).upper()
    if letter == 'üîô–ù–ê–ó–ê–î' or letter == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if letter in letters_list:
            data = await state.get_data()
            classroomNumber = data.get('classroomNumber')
            classroomLetter = letter
            subject = data.get('subject')
            group = data.get('group')
            school = data.get('school')
            pargroup = data.get('pargroup')
            if pargroup == 0:
                works = sorted(await db.get_students_work0(classroom_number=int(classroomNumber),
                                                          classroom_letter=classroomLetter,
                                                          subject=subject, group=group,
                                                          school=school), key=lambda x: x[4])
            else:
                works = sorted(await db.get_students_work(classroom_number=int(classroomNumber),
                                                          classroom_letter=classroomLetter,
                                                          subject=subject, group=group,
                                                          pargroup=pargroup, school=school), key=lambda x: x[4])
            temp_var = None
            if len(works) < 1:
                await message.answer(f'–ü–æ–∫–∞ —á—Ç–æ, –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–¥–∞–Ω–∏—è —Å {classroomNumber} "{classroomLetter}"\n'
                                     '<b>–ò–ª–∏ –∂–µ –≤—ã —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–∏–ª–∏ –∏—Ö —Ä–∞–±–æ—Ç—ã!</b>', reply_markup=Teachers_buttons)
            else:
                unic_id = randint(0, 99999)
                await message.answer(f'–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç: {unic_id}\n'
                                     f'–†–∞–±–æ—Ç—ã —É—á–µ–Ω–∏–∫–æ–≤ {classroomNumber} "{classroomLetter}":',
                                     reply_markup=Teachers_buttons)
                for work in works:
                    if temp_var != work[4]:
                        await message.answer('*==============================*\n\n'
                                             f'–§–∞–º–∏–ª–∏—è: {work[0]}\n–ò–º—è: {work[1]}\n–ê–∫–∫–∞—É–Ω—Ç: @{work[3]}')
                        temp_var = work[4]
                    try:
                        await bot.forward_message(chat_id=message.from_user.id, from_chat_id=work[4],
                                                  message_id=work[2])
                    except MessageToForwardNotFound:
                        await message.answer('<u>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∑–∞–¥–∞–Ω–∏–µ</u>')
                    await db.delete_students_file(id=work[4], subject=subject, file_id=work[2])
            await state.finish()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_letter)


# FUNC –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!

@dp.message_handler(lambda message: message.text and message.text.upper() in ['–°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï',
                                                                              '–°–û–ó–î–ê–¢–¨ –û–ë–™–Ø–í–õ–ï–ù–ò–ï ‚úèÔ∏è'], Teacher())
async def advertise(message: Message, state: FSMContext):
    teacher_data = await db.get_teacher_data(message.from_user.id)
    subject = teacher_data[0]
    group = teacher_data[1]
    pargroup = teacher_data[2]
    school = teacher_data[3]
    await state.update_data(subject=subject, group=group, pargroup=pargroup, school=school)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b> –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:',
                         reply_markup=OnePlus(
                             text=subject.split(', '),
                         ).reply_keyboard)
    await Advert.change_subject.set()


@dp.message_handler(state=Advert.change_subject)
async def get_subject(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == 'üîô–ù–ê–ó–ê–î' or subject == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        subjects_teacher = (await state.get_data()).get('subject')
        group_teacher = (await state.get_data()).get('group')
        if subject.title() in subjects_teacher.split(', '):
            await state.update_data(subject=subject.title())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:',
                                 reply_markup=OnePlus(
                                     text=group_teacher.split('/'),
                                 ).reply_keyboard)
            await Advert.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à</b> –ø—Ä–µ–¥–º–µ—Ç!')


@dp.message_handler(state=Advert.change_group)
async def get_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        group_teacher = (await state.get_data()).get('group')
        if group in group_teacher.split('/'):
            await state.update_data(group=group)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–ª–∞—Å—Å–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:',
                                 reply_markup=classroom_number)
            await Advert.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à–µ</b> –æ—Ç–¥–µ–ª–µ–Ω–∏–µ!')


@dp.message_handler(state=Advert.classroomNumber)
async def get_number(message: Message, state: FSMContext):
    number = message.text.upper()
    if number == 'üîô–ù–ê–ó–ê–î' or number == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if number in numbers_list:
            await state.update_data(classroomNumber=number)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É</b> –∫–ª–∞—Å—Å–∞', reply_markup=classroom_letter)
            await Advert.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_number)


@dp.message_handler(state=Advert.classroomLetter)
async def get_letter(message: Message, state: FSMContext):
    letter = message.text.upper()
    if letter == 'üîô–ù–ê–ó–ê–î' or letter == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if letter in letters_list:
            await state.update_data(classroomLetter=letter)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–æ–æ–±—â–µ–Ω–∏–µ</b>, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ –∏–∑–≤–µ—Å—Ç–Ω–æ—Å—Ç—å!',
                                 reply_markup=back)
            await Advert.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_letter)


@rate_limit(limit=0)
@dp.message_handler(state=Advert.messages, content_types=ContentTypes.ANY)
async def get_message(message: Message, state: FSMContext):
    answer = str(message.text).upper()
    if answer == 'üîô–ù–ê–ó–ê–î' or answer == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        data = await state.get_data()
        classroomNumber = data.get('classroomNumber')
        classroomLetter = data.get('classroomLetter')
        subject = data.get('subject')
        school = data.get('school')
        pargroup = data.get('pargroup')
        group = data.get('group')
        ids = await db.get_students_id(classroom_number=int(classroomNumber), classroom_letter=classroomLetter,
                                       group=group, pargroup=pargroup, school=school)
        if bool(len(ids)) is False:
            ids = await db.get_students_id0(classroom_number=int(classroomNumber), classroom_letter=classroomLetter,
                                            group=group, school=school)
        if bool(len(ids)):
            for id in ids:
                try:
                    await bot.send_message(chat_id=id[0], text=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∏—Ç–µ–ª—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}: ')
                    await message.forward(chat_id=id[0])
                except (Unauthorized, TelegramAPIError):
                    user = await db.find_student(id[0])
                    await message.answer(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[1]} {user[0]} –∏–∑ –∫–ª–∞—Å—Å–∞, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!')
            await message.answer(f'–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è {classroomNumber}{classroomLetter} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ!',
                                 reply_markup=Teachers_buttons)
        else:
            await message.answer('<b>–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤–∞–º–∏ –∫–ª–∞—Å—Å–µ –Ω–µ—Ç—É –ª—é–¥–µ–π!</b>', reply_markup=Teachers_buttons)
        await state.finish()


# FUNC –ò–ù–§–ê –û –ó–ê–î–ê–ù–ò–Ø–•
@dp.message_handler(
    lambda message: message.text and message.text.upper() in ['–°–í–ï–î–ï–ù–ò–Ø –û –†–ê–ë–û–¢–ê–•', '–°–í–ï–î–ï–ù–ò–Ø –û –†–ê–ë–û–¢–ê–• üìé'],
    Teacher())
async def tell_work(message: Message, state: FSMContext):
    teacher_data = await db.get_teacher_data(message.from_user.id)
    subject = teacher_data[0]
    group = teacher_data[1]
    pargroup = teacher_data[2]
    school = teacher_data[3]
    await state.update_data(subject=subject, group=group, pargroup=pargroup, school=school)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                         reply_markup=OnePlus(
                             text=subject.split(', '),
                         ).reply_keyboard)
    await TellWork.change_subject.set()


@dp.message_handler(state=TellWork.change_subject)
async def get_subject(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == 'üîô–ù–ê–ó–ê–î' or subject == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        subjects_teacher = (await state.get_data()).get('subject')
        group_teacher = (await state.get_data()).get('group')
        if subject.title() in subjects_teacher.split(', '):
            await state.update_data(subject=subject.title())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                                 reply_markup=OnePlus(
                                     text=group_teacher.split('/'),
                                 ).reply_keyboard)
            await TellWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à</b> –ø—Ä–µ–¥–º–µ—Ç!')


@dp.message_handler(state=TellWork.change_group)
async def get_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        group_teacher = (await state.get_data()).get('group')
        if group in group_teacher.split('/'):
            await state.update_data(group=group.upper())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–ª–∞—Å—Å–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                                 reply_markup=classroom_number)
            await TellWork.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à–µ</b> –æ—Ç–¥–µ–ª–µ–Ω–∏–µ!')


@dp.message_handler(state=TellWork.classroomNumber)
async def get_classroomNumber(message: Message, state: FSMContext):
    number = message.text.upper()
    if number == 'üîô–ù–ê–ó–ê–î' or number == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if number in numbers_list:
            await state.update_data(classroomNumber=int(number))
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É</b> –∫–ª–∞—Å—Å–∞', reply_markup=classroom_letter)
            await TellWork.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_number)


@dp.message_handler(state=TellWork.classroomLetter)
async def get_classroomLetter(message: Message, state: FSMContext):
    letter = message.text.upper()
    data = await state.get_data()
    subject = data.get('subject')
    group = data.get('group')
    school = data.get('school')
    pargroup = data.get('pargroup')
    classroomNumber = data.get('classroomNumber')
    if letter == 'üîô–ù–ê–ó–ê–î' or letter == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if letter in letters_list:
            send = f'–°–≤–µ–¥–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –≤ {classroomNumber}"{letter}":\n'
            if pargroup == 0:
                students = await db.exist_students_for_work0(classroom_number=classroomNumber, classroom_letter=letter,
                                                             group=group, school=school)
            else:
                students = await db.exist_students_for_work1(classroom_number=classroomNumber, classroom_letter=letter,
                                                             pargroup=pargroup, group=group, school=school)
            for data in students:
                works = await db.exist_students_for_work2(id=data[2], subject=subject)
                send += f'{data[0]} {data[1]}: {"‚úÖ" * works + "‚ùå" * (1 - works)}\n'
            await message.answer(text=send, reply_markup=Teachers_buttons)
            await state.finish()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_letter)


# FUNC –ò–ù–§–ê –û–ë –£–ß–ï–ù–ò–ö–ê–•
@dp.message_handler(
    lambda message: message.text and message.text.upper() in ['–û–¢–ö–†–´–¢–¨ –£–†–û–ö', '–û–¢–ö–†–´–¢–¨ –£–†–û–ö ‚è∞'],
    Teacher())
async def tell_work(message: Message, state: FSMContext):
    teacher_data = await db.get_teacher_data(message.from_user.id)
    subject = teacher_data[0]
    group = teacher_data[1]
    pargroup = teacher_data[2]
    school = teacher_data[3]
    await state.update_data(subject=subject, group=group, pargroup=pargroup, school=school)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                         reply_markup=OnePlus(
                             text=subject.split(', '),
                         ).reply_keyboard)
    await TeachersUpdates.change_subject.set()


@dp.message_handler(state=TeachersUpdates.change_subject)
async def get_subject(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == 'üîô–ù–ê–ó–ê–î' or subject == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        subjects_teacher = (await state.get_data()).get('subject')
        group_teacher = (await state.get_data()).get('group')
        if subject.title() in subjects_teacher.split(', '):
            await state.update_data(subject=subject.title())
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π</b>, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                                 reply_markup=OnePlus(
                                     text=group_teacher.split('/'),
                                 ).reply_keyboard)
            await TeachersUpdates.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à</b> –ø—Ä–µ–¥–º–µ—Ç!')


@dp.message_handler(state=TeachersUpdates.change_group)
async def get_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        group_teacher = (await state.get_data()).get('group')
        if group in group_teacher.split('/'):
            await state.update_data(group=group.upper())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä</b> –∫–ª–∞—Å—Å–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è:',
                                 reply_markup=classroom_number)
            await TeachersUpdates.next()
        else:
            await message.answer('–≠—Ç–æ <b>–Ω–µ –≤–∞—à–µ</b> –æ—Ç–¥–µ–ª–µ–Ω–∏–µ!')


@dp.message_handler(state=TeachersUpdates.classroomNumber)
async def get_classroomNumber(message: Message, state: FSMContext):
    number = message.text.upper()
    if number == 'üîô–ù–ê–ó–ê–î' or number == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if number in numbers_list:
            await state.update_data(classroomNumber=int(number))
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É</b> –∫–ª–∞—Å—Å–∞', reply_markup=classroom_letter)
            await TeachersUpdates.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>—á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_number)


@dp.message_handler(state=TeachersUpdates.classroomLetter)
async def get_classroomLetter(message: Message, state: FSMContext):
    letter = message.text.upper()
    data = await state.get_data()
    subject = data.get('subject')
    group = data.get('group')
    school = data.get('school')
    pargroup = data.get('pargroup')
    classroomNumber = data.get('classroomNumber')
    if letter == 'üîô–ù–ê–ó–ê–î' or letter == '–ù–ê–ó–ê–î':
        await state.finish()
        await message.answer('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                             '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                             '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help',
                             reply_markup=Teachers_buttons)
    else:
        if letter in letters_list:
            send = f'–°–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ {subject} –≤ {classroomNumber}"{letter}":\n'
            logs = await db.exist_open_accepts_for_teachers(school=school, group=group, classroom_number=classroomNumber,
                                                            classroom_letter=letter, pargroup=pargroup, subject=subject,
                                                            id=message.from_user.id)
            if logs:
                students = await db.exist_students_accepts(school=school, group=group,
                                                           classroom_number=classroomNumber, classroom_letter=letter,
                                                           pargroup=pargroup, subject=subject)
                for data in students:
                    if data[0]:
                        send += f'{data[4]} {data[3]}: @{data[2]}\n'
                        await db.update_students_accepts(id=data[1], subject=subject, accept=False)
                await db.update_teacher_accepts(id=message.from_user.id, subject=subject, school=school,
                                                classroom_number=classroomNumber, classroom_letter=letter, group=group,
                                                pargroup=pargroup, accept=False)
                await message.answer(text=send, reply_markup=Teachers_buttons)
                await state.finish()
            else:
                if logs is None:
                    await db.add_teacher_accepts(id=message.from_user.id, username=message.from_user.username,
                                                 last_name='–£—á–∏—Ç–µ–ª—å –ø—Ä–µ–¥–º–µ—Ç–∞', first_name=subject, school=school,
                                                 group=group, classroom_number=classroomNumber, classroom_letter=letter,
                                                 pargroup=pargroup, subject=subject, accepts=True)
                else:
                    await db.update_teacher_accepts(id=message.from_user.id, subject=subject, school=school,
                                                    classroom_number=classroomNumber, classroom_letter=letter, group=group,
                                                    pargroup=pargroup, accept=True)
                await message.answer(text=f'–£—á–µ–Ω–∏–∫–∏ {classroomNumber}"{letter}" –º–æ–≥—É—Ç –æ—Ç–º–µ—Ç–∏—Ç—å—Å—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}',
                                     reply_markup=Teachers_buttons)
            await state.finish()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>:', reply_markup=classroom_letter)
