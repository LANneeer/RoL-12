import json

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ContentTypes
from aiogram.utils.exceptions import MessageToForwardNotFound

from filters import Students
from keyboards.default import Subject_buttons, Students_buttons
from keyboards.default.mainKeyboards import back_and_send
from keyboards.default.subjectsKeyboard import subjects_list
from loader import dp, db, bot, _
from states import StudentsState, StudentsUpdates
from utils.misc import rate_limit


# FUNC –°–î–ê–¢–¨ –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï
@dp.message_handler(
    lambda message: message.text and message.text.upper() in [_('–°–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï'), _('–°–î–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï üì§')],
    Students())
async def send_hw(message: Message):
    await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º <b>–ø—Ä–µ–¥–º–µ—Ç</b>:'), reply_markup=Subject_buttons)
    await StudentsState.send_doc.set()


@dp.message_handler(state=StudentsState.send_doc)
async def select_subject(message: Message, state: FSMContext):
    subject = str(message.text).upper()
    if subject == _('üîô–ù–ê–ó–ê–î') or subject == _('–ù–ê–ó–ê–î'):
        await state.finish()
        await message.answer(text=_('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                    '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                    '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help'),
                             reply_markup=Students_buttons)
    else:
        if subject in subjects_list:
            await state.update_data(subject=subject.title())
            await message.answer(_('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Ä–∞–±–æ—Ç—É –≤ –≤–∏–¥–µ <b>—Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞</b>:'),
                                 reply_markup=back_and_send)
            await StudentsState.next()
        else:
            await message.answer(_('–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞! –í–≤–µ–¥–∏—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!'), reply_markup=Subject_buttons)


@rate_limit(limit=0)
@dp.message_handler(state=StudentsState.send_doc2, content_types=ContentTypes.ANY)
async def send_doc(message: Message, state: FSMContext):
    answer = str(message.text).upper()
    data = await state.get_data()
    subject = data.get('subject')
    student = await db.get_student_data(message.from_user.id)
    pargroup = student[5]
    username = student[6]
    school = student[7]
    if answer == _('–°–î–ê–¢–¨'):
        temp_data = None
        with open('temp.json', 'r') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
        if len(temp_data) != 0:
            if await db.exist_students_work(subject=subject, id=message.from_user.id):
                await db.delete_students_work(subject=subject, id=message.from_user.id)
            works_list = temp_data[str(message.from_user.id)]
            del temp_data[str(message.from_user.id)]
            with open('temp.json', 'w') as file:
                file.write(json.dumps(temp_data))
            for work in works_list:
                await db.add_students_work(id=message.from_user.id, username=username,
                                           last_name=student[4], first_name=student[3], school=school,
                                           groups=student[2].upper(),
                                           classroom_number=int(student[0]),
                                           classroom_letter=student[1], subject=subject, file_id=work,
                                           pargroup=int(pargroup))
            await state.finish()
            await message.answer(_('–ó–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n').format(subject=subject),
                                 reply_markup=Students_buttons)
        else:
            await message.answer(_('<b>–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!</b>\n'
                                 '–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ</b>, –∏–ª–∏ –∂–µ –Ω–∞–∂–º–∏—Ç–µ <b>"–ù–ê–ó–ê–î"</b>'),
                                 reply_markup=back_and_send)
    elif answer == _('–ù–ê–ó–ê–î') or answer == _('üîô–ù–ê–ó–ê–î'):
        with open('temp.json', 'r') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
            try:
                del temp_data[str(message.from_user.id)]
            except KeyError:
                pass
            with open('temp.json', 'w') as f:
                f.write(json.dumps(temp_data))
        await state.finish()
        await message.answer(_('<b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞–±–æ—Ç—ã!</b>'))
        await message.answer(text=_('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                    '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                    '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help'),
                             reply_markup=Students_buttons)
    else:
        temp_data = None
        with open('temp.json', 'r', encoding='utf-8') as file:
            try:
                temp_data = json.load(file)
            except json.decoder.JSONDecodeError:
                temp_data = dict()
        with open('temp.json', 'w') as file:
            user_id = str(message.from_user.id)
            if len(temp_data.get(user_id, [])) == 5:
                await message.answer(_('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ 5 —Ñ–∞–π–ª–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–î–ê–¢–¨"</b>:'))
            else:
                temp_data[user_id] = temp_data.get(user_id, []) + [str(message.message_id)]
            file.write(json.dumps(temp_data))


# FUNC –£–ó–ù–ê–¢–¨ –î–û–ú–ê–®–ù–ï–ï –ó–ê–î–ê–ù–ò–ï
@dp.message_handler(
    lambda message: message.text and message.text.upper() in [_('–£–ó–ù–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï'), _('–£–ó–ù–ê–¢–¨ –ó–ê–î–ê–ù–ò–ï üì•')],
    Students())
async def check_hw(message: Message):
    await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º <b>–ø—Ä–µ–¥–º–µ—Ç</b>:'), reply_markup=Subject_buttons)
    await StudentsState.view_doc.set()


@dp.message_handler(state=StudentsState.view_doc)
async def view_this(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == _('üîô–ù–ê–ó–ê–î') or subject == _('–ù–ê–ó–ê–î'):
        await state.finish()
        await message.answer(text=_('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                    '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                    '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help'),
                             reply_markup=Students_buttons)
    else:
        if subject in subjects_list:
            student = await db.get_student_data(message.from_user.id)
            pargroup = student[5]
            school = student[7]
            file = await db.get_teachers_work(classroom_number=int(student[0]), classroom_letter=(student[1]),
                                              subject=subject.title(), group=(student[2]),
                                              pargroup=pargroup, school=school)
            if bool(len(file)):
                temp_var = None
                for file in file:
                    if temp_var != file[1]:
                        await message.answer(_('*==============================*\n\n'
                                               '–£—á–∏—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {subject}\n'
                                               '–ê–∫–∫–∞—É–Ω—Ç: @{file}').format(file=file[2], subject=subject.title()),
                                             reply_markup=Students_buttons)
                        temp_var = file[1]
                    try:
                        await bot.forward_message(chat_id=message.from_user.id, from_chat_id=file[1],
                                                  message_id=file[0])
                    except MessageToForwardNotFound:
                        await message.answer(_('<u>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∑–∞–¥–∞–Ω–∏–µ</u>'))

            else:
                await message.answer(_('–ó–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> –Ω–µ –∑–∞–¥–∞–Ω—ã!').format(subject=subject.title()
                                                                                                 ),
                                     reply_markup=Students_buttons)
            await state.finish()
        else:
            await message.answer(_('–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞! –í–≤–µ–¥–∏—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!'), reply_markup=Subject_buttons)


# FUNC –ó–ê–î–ê–¢–¨ –í–û–ü–†–û–°
@dp.message_handler(
    lambda message: message.text and message.text.upper() in [_('–í–û–ü–†–û–° –ö –£–ß–ò–¢–ï–õ–Æ'), _('–í–û–ü–†–û–° –ö –£–ß–ò–¢–ï–õ–Æ ‚ÑπÔ∏è')],
    Students())
async def question(message: Message):
    student = await db.get_student_data(message.from_user.id)
    pargroup = student[5]
    school = student[7]
    teachers_username = await db.get_teachers_account(group='%'+student[2]+'%', school=school, pargroup=pargroup)
    send = _('<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ <i>@</i> –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–µ—Ä–µ–ø–∏—Å–∫—É!</b>\n\n')
    for data in teachers_username:
        send += _('–£—á–∏—Ç–µ–ª—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{datas}</b>: @{data}\n').format(data=data[0], datas=data[1])
    await message.answer(text=send, reply_markup=Students_buttons)


# FUNC –û–¢–ú–ï–¢–ò–¢–¨–°–Ø –ù–ê –£–†–û–ö–ï
@dp.message_handler(
    lambda message: message.text and message.text.upper() in [_('–û–¢–ú–ï–¢–ò–¢–¨–°–Ø –ù–ê –£–†–û–ö–ï'), _('–û–¢–ú–ï–¢–ò–¢–¨–°–Ø –ù–ê –£–†–û–ö–ï ‚ùóÔ∏è')],
    Students())
async def check_hw(message: Message):
    await message.answer(_('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º <b>–ø—Ä–µ–¥–º–µ—Ç</b>:'), reply_markup=Subject_buttons)
    await StudentsUpdates.change_subject.set()


@dp.message_handler(state=StudentsUpdates.change_subject)
async def view_this(message: Message, state: FSMContext):
    subject = message.text.upper()
    if subject == _('üîô–ù–ê–ó–ê–î') or subject == _('–ù–ê–ó–ê–î'):
        await state.finish()
        await message.answer(text=_('<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n'
                                    '–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ\n\n'
                                    '–î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: /help'),
                             reply_markup=Students_buttons)
    else:
        if subject in subjects_list:
            student = await db.get_student_data(message.from_user.id)
            subject = subject.title()
            subject_search = '%'+subject+'%'
            group = student[2]
            group_search = '%'+group+'%'
            pargroup = student[5]
            school = student[7]
            teachers_pargroup = await db.get_teachers_pargroup(group=group_search, pargroup=pargroup,
                                                               school=school, subject=subject_search)
            if await db.exist_open_accepts(school=school, group=student[2], classroom_number=student[0],
                                           classroom_letter=student[1], pargroup=teachers_pargroup, subject=subject,
                                           accept=True):
                accepts = await db.exist_one_students_accepts(subject=subject, id=message.from_user.id,
                                                              classroom_number=student[0], classroom_letter=student[1],
                                                              group=group_search, pargroup=teachers_pargroup)
                if accepts is not None:
                    if accepts:
                        await message.answer(_('–í—ã —É–∂–µ –æ—Ç–º–µ—á–µ–Ω—ã'), reply_markup=Students_buttons)
                    else:
                        await db.update_students_accepts(id=message.from_user.id, subject=subject, accept=True)
                        await message.answer(_('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>').format(
                                                                                                        subject=subject
                                                                                                        ),
                                             reply_markup=Students_buttons)
                else:
                    await db.add_students_accepts(id=message.from_user.id, username=student[6],
                                                  last_name=student[4], first_name=student[3], school=school,
                                                  group=student[2], classroom_number=student[0],
                                                  classroom_letter=student[1],
                                                  pargroup=teachers_pargroup, subject=subject, accepts=True)
                    await message.answer(_('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏—Å—å –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>').format(subject=subject)
                                         , reply_markup=Students_buttons)
                await state.finish()
            else:
                await message.answer(_('–£—Ä–æ–∫ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> –Ω–µ –Ω–∞—á–∞–ª—Å—è').format(subject=subject),
                                     reply_markup=Students_buttons)
                await state.finish()
        else:
            await message.answer(_('–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞! –í–≤–µ–¥–∏—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã!'), reply_markup=Subject_buttons)
