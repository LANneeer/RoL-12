from loader import bot
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove

from keyboards.default import classroom_number, classroom_letter, Subject_buttons, Group_buttons, Students_buttons, \
    Teachers_buttons, Group_buttons_teacher, OnePlus
from keyboards.default.Menu_buttons import numbers_list, letters_list, yes_or_no, school_list
from keyboards.default.Subjects import subjects_list, groups_list, pargroup_list, Pargroup_buttons, \
    Pargroup_buttons_teacher, groups_list_teacher
from loader import dp, db
from state.States import StudentsRegister, TeacherRegister


#######TEST#######
# @dp.message_handler(state=StudentsRegister.school)
# async def get_students_school(message: Message, state: FSMContext):
#     answer = str(message.text).upper()
#     if answer in school_list:
#         await state.update_data(school=answer)
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=Group_buttons)
#         await StudentsRegister.next()
#     else:
#         await message.answer('–¢–∞–∫–æ–π <b>—à–∫–æ–ª—ã –Ω–µ—Ç—É</b> –≤ —Å–ø–∏—Å–∫–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ <b>—Å–ø–∏—Å–∫–∞</b>!')
#######TEST#######


# STUDENTS REGISTRATE
# –ü—Ä–∏—ë–º —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏
@dp.message_handler(state=StudentsRegister.user_name)
async def get_students_name(message: Message, state: FSMContext):
    answer = message.text
    try:
        if len(answer) < 65:
            last_name, first_name = answer.split()
            if last_name.isalpha() and first_name.isalpha():
                await state.update_data(first_name=first_name.title(), last_name=last_name.title())
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —à–∫–æ–ª—É:', reply_markup=OnePlus(text=school_list).reply_keyboard)
                await StudentsRegister.next()
            else:
                await message.answer('–í—ã –≤–≤–µ–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</b> –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                     '–í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></b>:')
        else:
            await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è/–∏–º—è')
    except (ValueError, TypeError):
        await message.answer('–í—ã –≤–≤–µ–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</b> –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                             '–í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></b>:')


# –í—ã–±–æ—Ä —à–∫–æ–ª—ã
@dp.message_handler(state=StudentsRegister.school)
async def get_students_school(message: Message, state: FSMContext):
    answer = str(message.text).upper()
    if answer in school_list:
        await state.update_data(school=answer)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=Group_buttons)
        await StudentsRegister.next()
    else:
        await message.answer('–¢–∞–∫–æ–π <b>—à–∫–æ–ª—ã –Ω–µ—Ç—É</b> –≤ —Å–ø–∏—Å–∫–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ <b>—Å–ø–∏—Å–∫–∞</b>!')


# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=StudentsRegister.group)
async def get_students_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await StudentsRegister.user_name.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>')
    else:
        if group in groups_list:
            await state.update_data(group=group)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–æ–º–µ—Ä</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=classroom_number)
            await StudentsRegister.next()
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</b> –∏–∑ —Å–ø–∏—Å–∫–∞!')


# –ü—Ä–∏—ë–º —Ü–∏—Ñ—Ä—ã –∫–ª–∞—Å—Å–∞
@dp.message_handler(state=StudentsRegister.classroomNumber)
async def get_students_number(message: Message, state: FSMContext):
    number = message.text
    if number.upper() == 'üîô–ù–ê–ó–ê–î' or number.upper() == '–ù–ê–ó–ê–î':
        await StudentsRegister.group.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=Group_buttons)
    else:
        if number in numbers_list:
            await state.update_data(classroomNumber=number)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–±—É–∫–≤—É</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=classroom_letter)
            await StudentsRegister.next()
        else:
            await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=classroom_number)


# –ü—Ä–∏—ë–º –±—É–∫–≤—ã –∫–ª–∞—Å—Å–∞
@dp.message_handler(state=StudentsRegister.classroomLetter)
async def get_students_letter(message: Message, state: FSMContext):
    letter = message.text.upper()
    if letter == 'üîô–ù–ê–ó–ê–î' or letter == '–ù–ê–ó–ê–î':
        await StudentsRegister.classroomNumber.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–æ–º–µ—Ä</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=classroom_number)
    else:
        if letter in letters_list:
            await state.update_data(classroomLetter=letter)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É <b>–ø–∞—Ä-–≥—Ä—É–ø–ø—É</b>', reply_markup=Pargroup_buttons)
            await StudentsRegister.next()
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ <b>–±—É–∫–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞</b>')


# –ü—Ä–∏–µ–º –ø–∞—Ä–≥—Ä—É–ø–ø—ã
@dp.message_handler(state=StudentsRegister.pargroup)
async def get_students_pargroup(message: Message, state: FSMContext):
    pargroup = message.text.upper()
    if pargroup == 'üîô–ù–ê–ó–ê–î' or pargroup == '–ù–ê–ó–ê–î':
        await StudentsRegister.classroomLetter.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–±—É–∫–≤—É</u> –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:', reply_markup=classroom_letter)
    else:
        if pargroup in pargroup_list:
            if message.from_user.username is None:
                await message.answer('–ó–∞—á–µ–º —Ç—ã —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –∏ –Ω–∞—á–∞–ª!')
                await StudentsRegister.user_name.set()
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>')
            else:
                data = await state.get_data()
                first_name = data.get('first_name')
                last_name = data.get('last_name')
                school = data.get('school')
                group = data.get('group')
                classroomNumber = data.get('classroomNumber')
                classroomLetter = data.get('classroomLetter')
                await state.update_data(pargroup=pargroup)
                await state.update_data(username=message.from_user.username)
                await StudentsRegister.next()
                await message.answer(f'–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n'
                                     f'–®–∫–æ–ª–∞: {school}\n'
                                     f'–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {group}\n–ö–ª–∞—Å—Å: {classroomNumber} "{classroomLetter}"\n'
                                     f'–ü–∞—Ä-–≥—Ä—É–ø–ø–∞: {pargroup}\n'
                                     f'–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n\n'
                                     f'–í—Å—ë –ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ?',
                                     reply_markup=yes_or_no)
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–ø–∞—Ä-–≥—Ä—É–ø–ø—É</b> –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=Pargroup_buttons)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!
@dp.message_handler(state=StudentsRegister.accept)
async def get_students_accept(message: Message, state: FSMContext):
    data = await state.get_data()
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    school = data.get('school')
    group = data.get('group')
    classroomNumber = data.get('classroomNumber')
    classroomLetter = data.get('classroomLetter')
    pargroup = data.get('pargroup')
    username = data.get('username')
    if message.text.upper() == '–î–ê':
        await db.add_students(id=message.from_user.id, username=username,
                              first_name=first_name,
                              last_name=last_name, school=school, groups=group,
                              classroom_number=int(classroomNumber), classroom_letter=classroomLetter,
                              pargroup=int(pargroup))
        await bot.send_photo(chat_id=message.from_user.id,
                             photo='https://i.ibb.co/KGHt21B/photo-2020-08-22-00-20-52.jpg',
                             caption='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n'
                                     '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
                                     '—ç—Ç—É –∫–Ω–æ–ø–∫—É –≤–æ–∑–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞\n\n'
                                     '<b>–¢–∞–∫-–∂–µ –Ω–µ –¥—É–º–∞–π—Ç–µ –∫–∏–¥–∞—Ç—å –∏–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –º–∏–º–æ —É—á–µ–±–Ω–æ–≥–æ!\n'
                                     '(–º—ã —Å–ø–æ–∫–æ–π–Ω–æ –º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ :3)</b>',
                             reply_markup=Students_buttons)
        await state.finish()
    elif message.text.upper() == '–ù–ï–¢':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>', reply_markup=ReplyKeyboardRemove())
        await StudentsRegister.user_name.set()
    else:
        await message.answer('<b>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!</b>', reply_markup=yes_or_no)


# TEACHER REGISTRATE
# –ü—Ä–∏—ë–º —Ñ–∞–º–∏–ª–∏–∏ –∏ –∏–º–µ–Ω–∏ —É—á–∏—Ç–µ–ª—è
@dp.message_handler(state=TeacherRegister.user_name)
async def get_teachers_name(message: Message, state: FSMContext):
    answer = message.text
    try:
        if len(answer) < 65:
            last_name, first_name = answer.split()
            if last_name.isalpha() and first_name.isalpha():
                await state.update_data(first_name=first_name.title(), last_name=last_name.title())
                await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —à–∫–æ–ª—É:', reply_markup=OnePlus(text=school_list).reply_keyboard)
                await TeacherRegister.next()
            else:
                await message.answer('–í—ã –≤–≤–µ–ª–∏ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</b> –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                                     '–í–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></b>:')
        else:
            await message.answer('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è/–∏–º—è')
    except (ValueError, TypeError):
        await message.answer('–≤—ã –≤–≤–µ–ª–∏ <u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u> –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ!\n'
                             '–≤–≤–µ–¥–∏—Ç–µ <b>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è <u>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª</u></b>:')


# –í—ã–±–æ—Ä —à–∫–æ–ª—ã
@dp.message_handler(state=TeacherRegister.school)
async def get_teacher_school(message: Message, state: FSMContext):
    answer = str(message.text).upper()
    if answer in school_list:
        await state.update_data(school=answer)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=Group_buttons_teacher)
        await TeacherRegister.next()
    else:
        await message.answer('–¢–∞–∫–æ–π <b>—à–∫–æ–ª—ã –Ω–µ—Ç—É</b> –≤ —Å–ø–∏—Å–∫–µ!\n–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏–∑ <b>—Å–ø–∏—Å–∫–∞</b>!')


# –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã
@dp.message_handler(state=TeacherRegister.group)
async def get_teacher_group(message: Message, state: FSMContext):
    group = message.text.upper()
    if group == 'üîô–ù–ê–ó–ê–î' or group == '–ù–ê–ó–ê–î':
        await TeacherRegister.user_name.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>')
    else:
        if group in groups_list_teacher:
            await state.update_data(group=group)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:\n\n'
                                 '<b><u>–ï—Å–ª–∏ —É –≤–∞—Å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ '
                                 '–≤–∞–º –Ω–∞–¥–æ –≤–≤–µc—Ç–∏ –∏—Ö –≤ —Ä—É—á–Ω—É—é –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</u></b>',
                                 reply_markup=Subject_buttons)
            await TeacherRegister.next()
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –∏–∑ —Å–ø–∏—Å–∫–∞!')


# –ü—Ä–∏—ë–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —É—á–∏—Ç–µ–ª—è
@dp.message_handler(state=TeacherRegister.user_subject)
async def get_teacher_group(message: Message, state: FSMContext):
    teacher_subjects = message.text.upper()
    if teacher_subjects == 'üîô–ù–ê–ó–ê–î' or teacher_subjects == '–ù–ê–ó–ê–î':
        await TeacherRegister.group.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–æ—Ç–¥–µ–ª–µ–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:', reply_markup=Group_buttons_teacher)
    else:
        teacher_subjects = ', '.join(map(lambda x: x.strip(), teacher_subjects.split(',')))
        if len(set(teacher_subjects.split(', ') + subjects_list)) == len(subjects_list):
            await state.update_data(teacher_subjects=teacher_subjects.title())
            await TeacherRegister.next()
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É <b>–ø–∞—Ä-–≥—Ä—É–ø–ø—É</b>\n'
                                 '<b>–í—ã–±–µ—Ä–∏—Ç–µ "0" –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –ø–∞—Ä–≥—Ä—É–ø–ø—ã, '
                                 '–∏–ª–∏ –≤—ã –≤–µ–¥–µ—Ç–µ –µ–≥–æ –æ–¥–∏–Ω</b>',
                                 reply_markup=Pargroup_buttons_teacher)
        else:
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ –∫–Ω–æ–ø–∫–∞—Ö!', reply_markup=Subject_buttons)


# –ü—Ä–∏–µ–º –ø–∞—Ä–≥—Ä—É–ø–ø—ã
@dp.message_handler(state=TeacherRegister.pargroup)
async def get_teacherss_pargroup(message: Message, state: FSMContext):
    pargroup = message.text.upper()
    if pargroup == 'üîô–ù–ê–ó–ê–î' or pargroup == '–ù–ê–ó–ê–î':
        await TeacherRegister.user_subject.set()
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <u>–Ω–∞–∑–≤–∞–Ω–∏–µ</u> –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:\n\n'
                             '<b><u>–ï—Å–ª–∏ —É –≤–∞—Å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ '
                             '–≤–∞–º –Ω–∞–¥–æ –≤–≤–µc—Ç–∏ –∏—Ö –≤ —Ä—É—á–Ω—É—é –∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</u></b>',
                             reply_markup=Subject_buttons)
    else:
        if pargroup in pargroup_list:
            if message.from_user.username is None:
                await message.answer('–ó–∞—á–µ–º —Ç—ã —É–¥–∞–ª–∏–ª —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?! –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –∑–∞–Ω–æ–≤–æ –∫–∞–∫ –∏ –Ω–∞—á–∞–ª!')
                await TeacherRegister.user_name.set()
                await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>')
            else:
                data = await state.get_data()
                first_name = data.get('first_name')
                last_name = data.get('last_name')
                school = data.get('school')
                group = data.get('group')
                teacher_subjects = data.get('teacher_subjects')
                await state.update_data(pargroup=pargroup)
                await state.update_data(username=message.from_user.username)
                await TeacherRegister.next()
                await message.answer(f'–ò–º—è: {first_name}\n–§–∞–º–∏–ª–∏—è: {last_name}\n'
                                     f'–®–∫–æ–ª–∞: {school}\n'
                                     f'–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {group}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {teacher_subjects}\n–ü–∞—Ä-–≥—Ä—É–ø–ø–∞: {pargroup}\n'
                                     f'–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}\n\n'
                                     f'–í—Å—ë –ª–∏ –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ?',
                                     reply_markup=yes_or_no)
        else:
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–ø–∞—Ä-–≥—Ä—É–ø–ø—É</b> –∏–∑ —Å–ø–∏—Å–∫–∞!', reply_markup=Pargroup_buttons_teacher)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!
@dp.message_handler(state=TeacherRegister.accept)
async def get_teachers_subjects(message: Message, state: FSMContext):
    data = await state.get_data()
    first_name = data.get('first_name')
    last_name = data.get('last_name')
    school = data.get('school')
    group = data.get('group')
    teacher_subjects = data.get('teacher_subjects')
    pargroup = data.get('pargroup')
    username = data.get('username')
    if message.text.upper() == '–î–ê':
        await db.add_teachers(id=message.from_user.id, username=username,
                              first_name=first_name,
                              last_name=last_name, school=school, groups=group,
                              subject=teacher_subjects, pargroup=int(pargroup))
        await bot.send_photo(chat_id=message.from_user.id,
                             photo='https://i.ibb.co/KGHt21B/photo-2020-08-22-00-20-52.jpg',
                             caption='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!\n\n'
                                     '–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ –ø–æ—è–≤–∏–ª–∏—Å—å –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ '
                                     '—ç—Ç—É –∫–Ω–æ–ø–∫—É –≤–æ–∑–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞',
                             reply_markup=Teachers_buttons)
        await state.finish()
    elif message.text.upper() == '–ù–ï–¢':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b><u>—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è</u></b>', reply_markup=ReplyKeyboardRemove())
        await TeacherRegister.user_name.set()
    else:
        await message.answer('<b>–í—ã –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å!</b>', reply_markup=yes_or_no)
